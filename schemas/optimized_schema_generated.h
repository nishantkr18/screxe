// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OPTIMIZEDSCHEMA_H_
#define FLATBUFFERS_GENERATED_OPTIMIZEDSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct ExampleOptimized;
struct ExampleOptimizedBuilder;

struct ExampleOptimized FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExampleOptimizedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SIZE = 6,
    VT_FEATURE_NAMES = 8,
    VT_FEATURE_SIZES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t size() const {
    return GetField<uint8_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *feature_names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_FEATURE_NAMES);
  }
  const flatbuffers::Vector<uint8_t> *feature_sizes() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FEATURE_SIZES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_FEATURE_NAMES) &&
           verifier.VerifyVector(feature_names()) &&
           verifier.VerifyVectorOfStrings(feature_names()) &&
           VerifyOffset(verifier, VT_FEATURE_SIZES) &&
           verifier.VerifyVector(feature_sizes()) &&
           verifier.EndTable();
  }
};

struct ExampleOptimizedBuilder {
  typedef ExampleOptimized Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ExampleOptimized::VT_NAME, name);
  }
  void add_size(uint8_t size) {
    fbb_.AddElement<uint8_t>(ExampleOptimized::VT_SIZE, size, 0);
  }
  void add_feature_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> feature_names) {
    fbb_.AddOffset(ExampleOptimized::VT_FEATURE_NAMES, feature_names);
  }
  void add_feature_sizes(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> feature_sizes) {
    fbb_.AddOffset(ExampleOptimized::VT_FEATURE_SIZES, feature_sizes);
  }
  explicit ExampleOptimizedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ExampleOptimized> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExampleOptimized>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExampleOptimized> CreateExampleOptimized(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> feature_names = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> feature_sizes = 0) {
  ExampleOptimizedBuilder builder_(_fbb);
  builder_.add_feature_sizes(feature_sizes);
  builder_.add_feature_names(feature_names);
  builder_.add_name(name);
  builder_.add_size(size);
  return builder_.Finish();
}

inline flatbuffers::Offset<ExampleOptimized> CreateExampleOptimizedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint8_t size = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *feature_names = nullptr,
    const std::vector<uint8_t> *feature_sizes = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto feature_names__ = feature_names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*feature_names) : 0;
  auto feature_sizes__ = feature_sizes ? _fbb.CreateVector<uint8_t>(*feature_sizes) : 0;
  return CreateExampleOptimized(
      _fbb,
      name__,
      size,
      feature_names__,
      feature_sizes__);
}

inline const ExampleOptimized *GetExampleOptimized(const void *buf) {
  return flatbuffers::GetRoot<ExampleOptimized>(buf);
}

inline const ExampleOptimized *GetSizePrefixedExampleOptimized(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ExampleOptimized>(buf);
}

inline bool VerifyExampleOptimizedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ExampleOptimized>(nullptr);
}

inline bool VerifySizePrefixedExampleOptimizedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ExampleOptimized>(nullptr);
}

inline void FinishExampleOptimizedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ExampleOptimized> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedExampleOptimizedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ExampleOptimized> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_OPTIMIZEDSCHEMA_H_
