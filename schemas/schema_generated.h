// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct Feature;
struct FeatureBuilder;

struct Example;
struct ExampleBuilder;

struct Feature FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FeatureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SIZE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t size() const {
    return GetField<uint8_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct FeatureBuilder {
  typedef Feature Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Feature::VT_NAME, name);
  }
  void add_size(uint8_t size) {
    fbb_.AddElement<uint8_t>(Feature::VT_SIZE, size, 0);
  }
  explicit FeatureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Feature> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Feature>(end);
    return o;
  }
};

inline flatbuffers::Offset<Feature> CreateFeature(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t size = 0) {
  FeatureBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_size(size);
  return builder_.Finish();
}

inline flatbuffers::Offset<Feature> CreateFeatureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint8_t size = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreateFeature(
      _fbb,
      name__,
      size);
}

struct Example FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExampleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SIZE = 6,
    VT_FEATURES = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint8_t size() const {
    return GetField<uint8_t>(VT_SIZE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Feature>> *features() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Feature>> *>(VT_FEATURES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_FEATURES) &&
           verifier.VerifyVector(features()) &&
           verifier.VerifyVectorOfTables(features()) &&
           verifier.EndTable();
  }
};

struct ExampleBuilder {
  typedef Example Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Example::VT_NAME, name);
  }
  void add_size(uint8_t size) {
    fbb_.AddElement<uint8_t>(Example::VT_SIZE, size, 0);
  }
  void add_features(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Feature>>> features) {
    fbb_.AddOffset(Example::VT_FEATURES, features);
  }
  explicit ExampleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Example> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Example>(end);
    return o;
  }
};

inline flatbuffers::Offset<Example> CreateExample(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint8_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Feature>>> features = 0) {
  ExampleBuilder builder_(_fbb);
  builder_.add_features(features);
  builder_.add_name(name);
  builder_.add_size(size);
  return builder_.Finish();
}

inline flatbuffers::Offset<Example> CreateExampleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint8_t size = 0,
    const std::vector<flatbuffers::Offset<Feature>> *features = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto features__ = features ? _fbb.CreateVector<flatbuffers::Offset<Feature>>(*features) : 0;
  return CreateExample(
      _fbb,
      name__,
      size,
      features__);
}

inline const Example *GetExample(const void *buf) {
  return flatbuffers::GetRoot<Example>(buf);
}

inline const Example *GetSizePrefixedExample(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Example>(buf);
}

inline bool VerifyExampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Example>(nullptr);
}

inline bool VerifySizePrefixedExampleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Example>(nullptr);
}

inline void FinishExampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Example> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedExampleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Example> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
